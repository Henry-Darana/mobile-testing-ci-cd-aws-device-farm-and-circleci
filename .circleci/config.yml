version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1

jobs:
  build:
    docker:
      - image: cimg/openjdk:8.0.362
      - image: cimg/aws:2022.06
    environment:
      AWS_ACCESS_KEY_ID: context:aws-keys.AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY: context:aws-keys.AWS_SECRET_ACCESS_KEY
      AWS_DEFAULT_REGION: us-west-2
    steps:
      - checkout
      #- aws-cli/install
      - run: mvn -version
      - run:
          name: Install CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run: aws --version
      - run:
          name: Build a package for AWS Device Farm
          command: mvn clean package -DskipTests=true
      - run:
          name: Add POS to dependencies zip
          command: zip -u target/zip-with-dependencies.zip */test/resources/POS.apk
      - run:
          name: Configure AWS Credentials
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region $AWS_DEFAULT_REGION
      - run:
          name: Upload app and tests to Device Farm
          command: |
            PROJECT_ARN="arn:aws:devicefarm:us-west-2:366012283008:project:Jenkins Appium Device Farm"
            DEVICE_POOL_ARN="arn:aws:devicefarm:us-west-2:366012283008:devicepool:Samsung Galaxy Tab S8"
            APP_PATH="**/test/resources/KDS.apk"
            TEST_PACKAGE_PATH="**/target/zip-with-dependencies.zip"

            # Upload the app
            app_upload_result="$(aws devicefarm create-upload --project-arn $PROJECT_ARN --name "KDS-CI.apk" --type ANDROID_APP --query upload.[url,arn] --output text)"
            app_upload_url="$(echo $app_upload_result | cut -d ' ' -f 1)"
            app_upload_arn="$(echo $app_upload_result | cut -d ' ' -f 2)"
            aws s3 cp $APP_PATH $app_upload_url
            aws devicefarm update-upload --arn $app_upload_arn --status "PROCESSING"
#
#            # Upload the tests
#            test_upload_result="$(aws devicefarm create-upload --project-arn $PROJECT_ARN --name "tests.zip" --type APPIUM_JAVA_TESTNG_TEST_PACKAGE --query upload.[url,arn] --output text)"
#            test_upload_url="$(echo $test_upload_result | cut -d ' ' -f 1)"
#            test_upload_arn="$(echo $test_upload_result | cut -d ' ' -f 2)"
#            aws s3 cp $TEST_PACKAGE_PATH $test_upload_url
#            aws devicefarm update-upload --arn $test_upload_arn --status "PROCESSING"
#
#            # Schedule a test run
#            aws devicefarm schedule-run --project-arn $PROJECT_ARN --app-arn $app_upload_arn --device-pool-arn $DEVICE_POOL_ARN --name "My Test Run" --test  "type=APPIUM_JAVA_TESTNG,testPackageArn=$test_upload_arn,testSpecArn=$TEST_SPEC_ARN"
#      - run:
#          name: Save Test Results
#          command: |
#            mkdir -p ~/test-results/junit/
#            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
#          when: always
#      - store_test_results:
#          path: ~/test-results
#      - run:
#          name: Compress Artifacts
#          command: tar -cvzf gradle-test-report.tar .*/build/reports/tests/test/
#      - store_artifacts:
#          path: gradle-test-report.tar
#          destination: gradle-test-report.tar
#Nonsense
workflows:
  circle-ci-to-aws-device-farm-workflow:
    jobs:
      - build