version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1

jobs:
  build:
    docker:
      - image: cimg/openjdk:8.0.362
    environment:
      PROJECT_NAME: "Jenkins Appium Device Farm"
      DEVICE_POOL: "Samsung Galaxy Tab S8"
      APP_NAME: "KDS: "+"$CIRCLE_BUILD_NUM"
      TEST_NAME: "From Circle CI: "+"$CIRCLE_BUILD_NUM"

    steps:
      - checkout
      - run: mvn -version
      - run:
          name: Install CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run: aws --version
      - run:
          name: Install jq
          command: sudo apt-get install jq
      - run:
          name: Build a package for AWS Device Farm
          command: mvn clean package -DskipTests=true
      - run:
          name: Add POS to dependencies zip
          command: zip -u target/zip-with-dependencies.zip */test/resources/POS.apk
      - run:
          name: Configure AWS Credentials
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region us-west-2
      - run:
          name: Get project ARN and Extract Device Pool ARN
          command: |
            export PROJECT_ARN=$(aws devicefarm list-projects | jq -r '.projects[] | select(.name == "'"$PROJECT_NAME"'") | .arn')
            echo "Project ARN: $PROJECT_ARN"
            
            export DEVICE_POOL_ARN=$(aws devicefarm list-device-pools --arn "$PROJECT_ARN" | jq -r '.devicePools[] | select(.name == "'"$DEVICE_POOL"'") | .arn')
            echo "Device Pool ARN: $DEVICE_POOL_ARN"            
            
            export APP_UPLOAD_RESPONSE=$(aws devicefarm create-upload --project-arn "$PROJECT_ARN" --name "$APP_NAME" --type ANDROID_APP)
            export APP_UPLOAD_URL=$(echo $APP_UPLOAD_RESPONSE | jq -r '.upload.url')
            export APP_UPLOAD_ARN=$(echo $APP_UPLOAD_RESPONSE | jq -r '.upload.arn')
            echo "App Upload ARN: $APP_UPLOAD_ARN"
            echo "App Upload URL: $APP_UPLOAD_URL"
            curl -T **/test/resources/KDS.apk "$APP_UPLOAD_URL"
            sleep 15
            export APP_UPLOAD_RESPONSE=$(aws devicefarm get-upload --arn "$APP_UPLOAD_ARN")
            echo "App Upload Status: $(echo $APP_UPLOAD_RESPONSE | jq -r '.upload.status')"
            
            export TEST_UPLOAD_RESPONSE=$(aws devicefarm create-upload --project-arn "$PROJECT_ARN" --name zip-with-dependencies.zip --type APPIUM_JAVA_TESTNG_TEST_PACKAGE)
            export TEST_UPLOAD_URL=$(echo $TEST_UPLOAD_RESPONSE | jq -r '.upload.url')
            export TEST_UPLOAD_ARN=$(echo $TEST_UPLOAD_RESPONSE | jq -r '.upload.arn')
            echo "Tests Upload ARN: $TEST_UPLOAD_ARN"
            echo "Tests Upload URL: $TEST_UPLOAD_URL"
            curl -T target/zip-with-dependencies.zip "$TEST_UPLOAD_URL"
            sleep 15
            export TEST_UPLOAD_RESPONSE=$(aws devicefarm get-upload --arn "$TEST_UPLOAD_ARN")
            echo "Test Upload Status: $(echo $TEST_UPLOAD_RESPONSE | jq -r '.upload.status')"
            
            export TEST_SPEC_UPLOAD_RESPONSE=$(aws devicefarm create-upload --name TraySpec.yml --type APPIUM_JAVA_TESTNG_TEST_SPEC --project-arn "$PROJECT_ARN")
            export TEST_SPEC_URL=$(echo $TEST_SPEC_UPLOAD_RESPONSE | jq -r '.upload.url')
            export TEST_SPEC_ARN=$(echo $TEST_SPEC_UPLOAD_RESPONSE | jq -r '.upload.arn')
            echo "Tests Spec ARN: $TEST_SPEC_ARN"
            echo "Tests Spec URL: $TEST_SPEC_URL"
            curl -T **/test/resources/TraySpec.yml "$TEST_SPEC_URL"
            sleep 15
            
            aws devicefarm schedule-run --project-arn "$PROJECT_ARN" --app-arn "$APP_UPLOAD_ARN" --device-pool-arn $DEVICE_POOL_ARN --name "$TEST_NAME" --test testSpecArn="$TEST_SPEC_ARN",type=APPIUM_JAVA_TESTNG,testPackageArn="$TEST_UPLOAD_ARN"



  #      - run:
  #        name: Upload app and tests to Device Farm
  #        command: |
  #          PROJECT_ARN="arn:aws:devicefarm:us-west-2:366012283008:project:Jenkins Appium Device Farm"
  #          DEVICE_POOL_ARN="arn:aws:devicefarm:us-west-2:366012283008:devicepool:Samsung Galaxy Tab S8"
  #          APP_PATH="**/test/resources/KDS.apk"
  #          TEST_PACKAGE_PATH="**/target/zip-with-dependencies.zip"


#      - run:
#          name: Save Test Results
#          command: |
#            mkdir -p ~/test-results/junit/
#            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
#          when: always
#      - store_test_results:
#          path: ~/test-results
#      - run:
#          name: Compress Artifacts
#          command: tar -cvzf gradle-test-report.tar .*/build/reports/tests/test/
#      - store_artifacts:
#          path: gradle-test-report.tar
#          destination: gradle-test-report.tar
#Nonsense
workflows:
  circle-ci-to-aws-device-farm-workflow:
    jobs:
      - build:
          context: aws-keys